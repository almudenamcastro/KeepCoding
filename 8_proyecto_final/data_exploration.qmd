---
title: "Data exploration"
format: html
editor: visual
---

# Airbnb listings - Data exploration

## Read the data:

Read the data and load necessary libraries:

```{r setup, include=FALSE}

library(tidyverse)
library(ggplot2)

airbnb <- read.csv("airbnb-listings.csv", sep=";", colClasses=c("Scrape.ID"="character"))
summary(airbnb)
```

## initial visualization

Let's paint this, see what we have:

```{r}
world <- map_data("world")
```

```{r}
world_ab <- airbnb |>
  ggplot() +
  geom_polygon(aes(x = long, y = lat, group = group), data=world, fill=NA, colour = "grey") +
  geom_point(aes(Longitude, Latitude)) +
  coord_map() +
  theme_bw()

world_ab
```

This data is the result of looking for "Madrid" in the source page. Although most of the houses are based in Madrid (around 90% of the total number) , some of them seem to be distributed around the world. Maybe this keyword came up in different textfiedls for spurious reasons. Let's filter the relevant data by Longitude and Latitude:

```{r}
# zoom the map into Spain... 
world_ab +
  xlim(-10,5) +
  ylim(36,44)
```

```{r}
# zoom into Madrid
world_ab +
  xlim(-3.9,-3.5) +
  ylim(40.3,40.6)
```

```{r}
airbnb_clean <- airbnb |>
  filter (Longitude > -3.9 & Longitude < -3.5 & Latitude > 40.3 & Latitude < 40.6 )
```

## Assign data classes:

Let's assign the correct class to each column. We use as.Date to interpret the date columns:

```{r}
fechas <- c("Last.Scraped", "Calendar.last.Scraped","First.Review","Last.Review", "Host.Since")

#convert date columns: 
for (element in fechas){
  airbnb_clean[[element]] <- as.Date(airbnb_clean[[element]])
}
```

Now, we want to identify what character columns could be interpreted as factors (categorical qualitative variables). In order to do that, we are going to create a function that tells us how many repeated values are there in each column fo the df:

```{r}
# cols returns a df2 that summarizes: the column name, nr of unique values and repeated values in each column of a df. 

cols <- function(df){
  #initialize summary columns
  nc <- ncol(df)
  type <- character(nc)
  unique_values <- integer(nc)
  nas <- integer(nc)
  empty <- integer(nc)
  
  #save aggregated values:
  for (i in 1:nc){
    type[i] <- typeof(df[[i]])
    unique_values[i] <- length(unique(df[[i]]))
    if(type[i]=="character"){
      empty[i] <- sum(nchar(df[[i]], keepNA=F) == 0)
    }
    else{
      empty[i] <- sum(is.na(df[[i]]))
    }
  }
  #calculate repeated values
  repeated=nrow(df)-unique_values-empty
  
  #return summary df
  data.frame("column"=colnames(df), unique_values, type, empty, repeated)
}
```

```{r}
#save cols summary in a new df:
airbnb_cols <- cols(airbnb_clean)
airbnb_cols
```

Now, we can convert categorical columns to factor

```{r}
#convert character columns into factors: 
for (i in 1:nrow(airbnb_cols)){
  if (airbnb_cols$type[i] == "character" & airbnb_cols$repeated[i] > 6000){
    nombre <- airbnb_cols$column[i]
    airbnb_clean[[nombre]] <-  factor(airbnb_clean[[nombre]], exclude="")
  }
}
```

## Data entities:

The columns unique values can tell us a lot about about the entities on this table and how they relate: - For instance -\> there are 14780 listings, but only 8935 Hosts. This means that one Host can have multiple houses to rent in airbnb. Let's create table for different entities:

#### Scrapes table:

```{r}
scrapes <- airbnb_clean |>
  select(c("Scrape.ID", "Last.Scraped")) |> 
  unique()
```

All the data comes from a single scraping that took place in April 2017.

#### Hosts table:

```{r}
hosts <- airbnb_clean |>
  select(contains("Host")) |>
  unique()

hosts_cols <- cols(hosts)

```

There are 8187 unique Hosts. Some of them offer multiple houses in Madrid.

## Cleaning location data:

Neighbourhood seems to be a categorical parameter.

```{r}
neighbourhoods <- airbnb_clean |>
  select(starts_with("Neighbourhood"), "City") |>
  unique()
```

But there seems to be a difference between Neighbourhood and Neighbouhood.Cleansed. Let's visualize that:

```{r}
madrid_ab <- airbnb_clean |>
  ggplot() +
  coord_map() +
  theme_bw() +
  theme(legend.position = "none")
  
madrid_nh <- madrid_ab +
  geom_point(aes(Longitude, Latitude, color=Neighbourhood))

madrid_nhc <- madrid_ab +
  geom_point(aes(Longitude, Latitude, color=Neighbourhood.Cleansed))

gridExtra::grid.arrange(madrid_nh, madrid_nhc, ncol=2)  

```

It seems that Neighbourhood.Cleansed correlates better with the Geolocalitation data for each house. Neighbourhood also has more empty values. We will use Neighbourhood.Cleansed from now on.

```{r}
airbnb_clean <- airbnb_clean |>
  select(-"Neighbourhood")

neighbourhoods <- neighbourhoods |>
  select(-"Neighbourhood")
```

It is also weird that there are multiple values for Country, Country.Code, State and City:

```{r}
unique(airbnb_clean$Country)
unique(airbnb_clean$Country.Code)
unique(airbnb_clean$State)
unique(airbnb_clean$City)

```

We have already checked that all the houses are located in Madrid, so we can overwrite these fields:

```{r}
airbnb_clean$Country <- factor("Spain")
airbnb_clean$Country.Code <- factor("ES")
airbnb_clean$State <- factor("Madrid")
airbnb_clean$City <- factor("Madrid")
neighbourhoods$City <- factor("Madrid")

airbnb_cols <- cols(airbnb_clean)
```

## What could we learn?

Let's look into the columns and see what we could learn from them. We can then remove columns that are probably not too relevant for our analysis. 
#### Basic data: 
- ID, Host.ID: The IDs will help us tell houses and hosts apart 
- Latitude, Longitude, Street, Neighbourhood.Cleansed, Neighbourhood.Group.Cleansed, Zipcode -> relevant to represent the data. 

#### Key metrics**:
- Price, Weekly.Price, Monthly.Price, Security.Deposit, Cleaning.Fee: these are values we could try to predict. But all of them have lots of empty values except for "Price". 
- Availability.30, Availability.60, Availability.90, Availability.365, Calendar.Updated?: could be interesting -> low availability is indicative of high demand. 


#### Possible data stories: 

* **Do words increase your airbnb price?**: Name (char), Summary, Space, Description, Neighborhood.Overview, Notes, Transit, Access, Interaction, House.Rules. These are all char fields. They could allow us to compare some liguistic features with the house price or availability. For instance: are houses described in English more expensive than those that have Spanish names? 

* **Does gender affect pricing in airbnb?**:  Host.Name: gender analysis. are male hosts setting prices higher than female hosts or viceversa? Do their houses have higher demand? 

* **The key to success as an airbnb host**: Host.Since, Host.Location, Host.About, Host.Response.Time, Host.Response.Rate, Host.Listings.Count, Host.Verifications, Features. We could look for the host characteristics and behaviours that drive higher demand. Are more experienced hosts setting prices higher than new-comers or viceversa? Having a description is relevant for the price? 

* **The most wanted in airbnb**: Property.Type, Room.Type, Bed.Type, Bathrooms, Bedrooms, Beds, Accommodates, Amenities, Guests.Included, Extra.People, Minimum.Nights, Maximum.Nights, Cancellation.Policy, Features. We can look for the property characteristics that drive high demand and/or higher price. 

* **The value of social proof**: Number.of.Reviews, First.Review, Last.Review, Review.Scores.Rating, Review.Scores.Accuracy, Review.Scores.Cleanliness, Review.Scores.Checkin, Review.Scores.Communication, Review.Scores.Location, Review.Scores.Value, Reviews.per.Month.

### Columns we should probably transform: 
- Amenities: is is a variable list of categorical features. We could turn each one into a new column with T/F values. 
- Features: is is a variable list of categorical features. We could turn each one into a new column with T/F values. 
- Calendar.updated: turn it into days_since last update to make it quantitative. 

#### Columns that we could remove: 

+ Scrape.ID, Last.Scraped, City, State, Country, Country.Code: not too relevant, all houses share the same value 
+ Experiences.Offered, Host.Acceptance.Rate, Jurisdiction.Names, Has.Availability: all values are "none". 
+ Calendar.last.Scraped: there are only 2 different dates, separated by a day (the date is the same as the Last.Scraped date)

+ Listing.Url: probably redundant with the house ID 
+ Host.Url: probably redundant with the host ID
+ Thumbnail.Url, Medium.Url, Picture.Url, XL.Picture.Url, Host.Thumbnail.Url, Host.Picture.Url: we won't be doing image analysis this time. 

+ Host.Total.Listings.Count, Calculated.host.listings.count: caculated is very similar to Host.Listings.Count (only inferior in 12% of the cases). Total is identical.
+ Host.Neighbourhood: similar to Host.Location. 
+ Market, Smart.Location: seem a bit redundant with other location data. 

+ Square.Feet: this is an interesting value to predict price. But it is mostly empty. 
+ License: mostly empty
- Geolocation: redundant with longitud + latitude.


```{r} 
airbnb_sel <- airbnb_clean

for (i in 1:nrow(airbnb_cols)){
  if (airbnb_cols$unique_values[i] < 3 | airbnb_cols$empty[i] > 12000){
    nombre <- airbnb_cols$column[i]
    airbnb_sel <- airbnb_sel |> 
      select(-nombre)
  }
}
airbnb_sel <- airbnb_sel |>
  select(-contains("Url")) |>
  select(-Host.Neighbourhood, -Host.Total.Listings.Count, -Calculated.host.listings.count, -Market, -Smart.Location )

```
